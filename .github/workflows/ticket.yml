name: Java CI with Gradle

on:
  push:
    branches: [ "refactor/code" ]
env:
  SERVER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          
      - uses: actions/checkout@v3
      - run: mkdir -p ./src/main/resources
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.PROPERTIES }}" > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties
      - run: mkdir -p ./src/test/resources
      - run: touch ./src/test/resources/application.properties
      - run: echo "${{ secrets.PROPERTIES_TEST }}" > ./src/test/resources/application.properties
      - run: cat ./src/test/resources/application.properties

      - name: Run chmod to make gradlew executable
        run: chmod u+x ./gradlew


      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build
            
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PWD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
      - uses: actions/checkout@v3

      - name: copy docker-compose.yml and deploy.sh
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "./docker-compose.yml,./deploy.sh"
          target: ./

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            docker stop $(docker ps -a --filter "ancestor=$SERVER_IMAGE" -q)
            docker rmi $(docker images $SERVER_IMAGE -q)
            docker pull $SERVER_IMAGE
            chmod u+x ./deploy.sh
            ./deploy.sh
#            docker-compose -f "docker-compose.yml" up -d --build
